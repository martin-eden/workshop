return
  {
    handlers =
      {
        bin_op = request('handlers.expressions.bin_op'),
        boolean = request('handlers.expressions.boolean'),
        bracket_expr = request('handlers.expressions.bracket_expr'),
        colon_name = request('handlers.expressions.colon_name'),
        dot_name = request('handlers.expressions.dot_name'),
        expr_list = request('handlers.expressions.expr_list'),
        func_args = request('handlers.expressions.func_args'),
        function_params = request('handlers.expressions.function_params'),
        key_val = request('handlers.expressions.key_val'),
        name = request('handlers.expressions.name'),
        name_list = request('handlers.expressions.name_list'),
        ['nil'] = request('handlers.expressions.nil'),
        number = request('handlers.expressions.number'),
        par_expr = request('handlers.expressions.par_expr'),
        string = request('handlers.expressions.string'),
        table = request('handlers.expressions.table'),
        type_function = request('handlers.expressions.type_function'),
        un_op = request('handlers.expressions.un_op'),
        var_link = request('handlers.expressions.var_link'),
        vararg = request('handlers.expressions.vararg'),

        break_statement = request('handlers.statements.break_statement'),
        do_block = request('handlers.statements.do_block'),
        call_assign = request('handlers.statements.call_assign'),
        else_part = request('handlers.statements.else_part'),
        elseif_part = request('handlers.statements.elseif_part'),
        generic_for_block = request('handlers.statements.generic_for_block'),
        goto_statement = request('handlers.statements.goto_statement'),
        if_block = request('handlers.statements.if_block'),
        if_part = request('handlers.statements.if_part'),
        label_statement = request('handlers.statements.label_statement'),
        local_assignment = request('handlers.statements.local_assignment'),
        local_statement = request('handlers.statements.local_statement'),
        named_function = request('handlers.statements.named_function'),
        numeric_for_block = request('handlers.statements.numeric_for_block'),
        repeat_block = request('handlers.statements.repeat_block'),
        return_statement = request('handlers.statements.return_statement'),
        while_block = request('handlers.statements.while_block'),

        expression = request('handlers.expression'),
        statements = request('handlers.statements'),
      },
    process_list = request('process_list'),
    process_node = request('process_node'),

    stream = nil,
  }
