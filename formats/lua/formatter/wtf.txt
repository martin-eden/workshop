Code to process structure returned by [preprocess] facility.

This structure is some sort of AST. We process it with handlers
dependent on type of AST node. Those handlers add some text to
virtual printer/screen/terminal. At the end that text becomes
string with formatted source code.

There is notable method ":variate(node, oneliner, multiliner)" which
calls "oneliner" representation handler. If result is beyond margins
(or if we are inside of multiline block), it calls "multiliner"
handler. This allows adaptive formatting (at the cost of search
time).


There are some non-trivial stuff in [variate]/[represent].

[variate] function mimics regular node representer. But actually it
may try one or two "inner" node representers. And then add to output
a result that fits under right margin. See [representation_is_allowed]
for details. If no such representation possible, output is not changed
and "false" returned.

Code is so strange and complex because

  * that "inner" functions may be variate() too
    (That is why node representer interface asks handler to return
    "true" or "false" - make early exit possible and reduce O(2^n)
    cases.)
  * we still need final output, even if it beyond margins
    (So we're storing last not very disgusting result for each depth.)
