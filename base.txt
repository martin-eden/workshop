Well, this is base module. It differs from others in that it
creates several global variables.

It provides base functions used by other modules in system.
These functions may be described as handy, crucial and optional.


Handy functions made global because they use very often.
They are

  is_<type> - family of functions is_nil, is_number, ... - one
    for each type.

    They receive one parameter and return "true" when it's
    type corresponds name of function.

  assert_<type> - almost same family of functions.

    They receive one parameter and raise error if it's type
    not corresponds name of function.

  is_integer,
  assert_integer - special cases to detect integer number type.

    (
      In Lua 5.3 hidden integer numbers were introduced. For both
      float and integer values type() returns "number" but
      math.type() - "float" or "integer".
    )

  new - clone table with possible field overrides.

    It's often used in OO-modules.

    It awaits one or two table parameters. Clones first table.
    Overrides it fields with corresponding fields from second
    table (error raise if field from second table is not presented
    in first).

    Returns cloned and possibly patched first table.

    It's typical usage is specifying field values at object creation:

      local obj_a = new(class_a, {class_a_specific_field = new_value})


Crucial function is

  request - wrapper for require() with relative module paths support.

    Yes, require() don't support relative names. But relative names
    possible in some (most) cases.

    Consider following chain of calls:

      require('house.room_1.a')
        require('house.room_2.a')

    If we wrap require(), at second call in the chain we can
    understand that our caller name is "house.room_1.a".
    So in "a.lua" we may reference "../b.lua" as "^.room_2.b".

    I consider this concept of relative naming important because if
    directory "house" is renamed to "block", with traditional
    require() all references in this directory files has to be
    changed. Which is merely silly from code autonomy point of view.

    But this approach has limitation - we can't get parent caller
    name if the call is executed not at module load time.

    So module with this code is OK:

      local g = request('^.room_2.b')
      g()

    but not this:

      local function f()
        local g = request('^.room_2.b')
        g()
      end
      return f

    I'm avoiding this by storing all needed request()'s in local
    variables filled at loading time.


Optional stuff is

  dependencies - table containing dependencies between loaded modules.

    It is filled along request() execution - at load time we have
    unique information about dependencies, so storing them just
    because.

    It's format is [caller_name][callee_name]. Both names are
    normal module names, require()-ready.


Also it fills table.pack, table.unpack (if these fields are empty)
with pack(), unpack(). If table.pack is still empty if fill it with
equivalent function.

Such hassle is due different locations of these functions in Lua
versions:

     _G.pack  table.pack  _G.unpack  table.unpack
5.1     ---      ---          +          ---
5.2     ---       +           +           +
5.3     ---       +          ---          +
